plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.1'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.ghkdtlwns987'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    asciidoctorExt // asciidoctor를 확정하는 asciidoctorExt에 대한 종속성 구성 선언
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    compileOnly 'org.projectlombok:lombok'
//    runtimeOnly 'com.h2database:h2'
    implementation 'com.h2database:h2'

    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'

    testImplementation 'com.squareup.okhttp3:mockwebserver:4.10.0'

    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // mariadb
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    // aop
    implementation 'org.springframework.boot:spring-boot-starter-aop'
}
// 테스트를 통해 생성된 snippets 출력 위치 정의
ext {
    snippetsDir = file('build/generated-snippets')
}

tasks.named('test') {
    useJUnitPlatform()

    // test 스니펫 디렉터리를 출력으로 추가하도록 작업을 구성
    outputs.dir snippetsDir
}

// 기존에 존재하던 docs 삭제
// 테스트 할때마다 초기화 과정?
asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

// asciidoctor 작업을 구성
asciidoctor {
    inputs.dir snippetsDir // 불러올 스니펫 위치
    configurations 'asciidoctorExt' // asciidoctorExt에 대한 설정
    dependsOn test // test 작업 이후에 실행하도록 설정
}

// 프로젝트를 .jar로 빌드할 때 resodocs가 해당 jar파일에 들어가게끔 하기위한 부분
bootJar {
    dependsOn asciidoctor // asciidoctor 작업 이후에 실행하도록 설정
    // 생성된 문서(html)를 static/docs로 복사
    from("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
}
// asciidoctor 작업 이후 생성된 HTML파일을 static/docs로 복사
task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("$buildDir/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

// copyDocument가 끝난 후 build 실행
build {
    dependsOn copyDocument
}

// === ⭐ QueryDsl 빌드 옵션 (선택) ===
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

clean.doLast {
    file(querydslDir).deleteDir()
}